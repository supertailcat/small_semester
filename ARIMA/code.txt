import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import datetime
from statsmodels.tsa.stattools import adfuller #ADF检验
from statsmodels.stats.diagnostic import acorr_ljungbox #白噪声检验
from statsmodels.graphics.tsaplots import plot_acf,plot_pacf #画图定阶
from statsmodels.tsa.arima_model import ARIMA #模型
from statsmodels.stats.stattools import durbin_watson #DW检验
from statsmodels.graphics.api import qqplot #qq图

#读取数据
data0=pd.read_csv('F:/spark/bin/maxmin.csv',parse_dates=['date'],index_col='date')
data1=data0.loc['1980-06-28':'2005-06-28']
data=data1.loc[:, ['tmin']]
data.plot(figsize=(25,8)) #原图
# plt.show()
#一阶差分
diff_1=data.diff(1)
diff1=diff_1.dropna()
#二阶差分
diff_2=diff_1.diff(1)
diff2=diff_2.dropna()

#画图判断是否平稳
fig=plt.figure(figsize=(25,8))
ax=fig.add_subplot(111)
diff2.plot(ax=ax)
plt.show()

fig=plt.figure(figsize=(25,8))
ax1=fig.add_subplot(211)
fig=sm.graphics.tsa.plot_acf(diff2,lags=23,ax=ax1)
ax2=fig.add_subplot(212)
fig=sm.graphics.tsa.plot_pacf(diff2,lags=23,ax=ax2)
plt.show()

# 设置遍历循环的初始条件，以热力图的形式展示，跟AIC定阶作用一样
p_min = 0
q_min = 0
p_max = 5
q_max = 5
d_min = 0
d_max = 5
# 创建Dataframe,以BIC准则
results_aic = pd.DataFrame(index=['AR{}'.format(i) \
                                  for i in range(p_min, p_max + 1)], \
                           columns=['MA{}'.format(i) for i in range(q_min, q_max + 1)])
# itertools.product 返回p,q中的元素的笛卡尔积的元组
import itertools
import seaborn as sns #热力图
for p, d, q in itertools.product(range(p_min, p_max + 1), \
                                 range(d_min, d_max + 1), range(q_min, q_max + 1)):
    if p == 0 and q == 0:
        results_aic.loc['AR{}'.format(p), 'MA{}'.format(q)] = np.nan
        continue
    try:
        model = sm.tsa.ARIMA(diff2, order=(p, d, q))
        results = model.fit()
        # 返回不同pq下的model的BIC值
        results_aic.loc['AR{}'.format(p), 'MA{}'.format(q)] = results.aic
    except:
        continue
results_aic = results_aic[results_aic.columns].astype(float)
# print(results_bic)

fig, ax = plt.subplots(figsize=(10, 8))
ax = sns.heatmap(results_aic,
                 # mask=results_aic.isnull(),
                 ax=ax,
                 annot=True,  # 将数字显示在热力图上
                 fmt='.2f',
                 )
ax.set_title('AIC')
plt.show()

#p=0 q=4 d=2?

# def string_toDatetime(string):
#     return datetime.datetime.strptime(string, "%Y-%m-%d %H:%M:%S")
#
#
# def ARIMA_model(train_H, train):
#     result = ARIMA(train, order=(0,2,0)).fit() # ARIMA模型
#
#     # print(result.summary()) #给出一份模型报告
#     ########得到训练集的预测时间序列#########
#     pred = result.predict()
#
#     #######还原#########
#     # 将差分后的序列还原,pred_restored为还原之后
#     idx = pd.date_range(string_toDatetime('2018-8-1 00:00:00'), periods=len(pred[4:20]), freq='D')
#     pred_list = []
#     for i in range(len(pred[4:20])):
#         pred_list.append(np.array(pred)[i + 4])
#     pred_numpy = pd.Series(np.array(pred_list), index=idx)
#
#     pred_restored = pd.Series(np.array(train_H)[5][0], \
#                               index=[train_H.index[5]]).append(pred_numpy).cumsum()
#     x1 = np.array(pred_restored)
#     x2 = np.array(train_H[5:22])
#     y = []
#     for i in range(len(pred_restored)):
#         y.append(i + 1)
#     y = np.array(y)
#     fig1 = plt.figure(num=2, figsize=(10, 4), dpi=80)
#     plt.plot(y, x1, color='blue')
#     plt.plot(y, x2, color='red')
#     plt.ylim(0, 0.8)
#     plt.show()
#
#
#
#
# ARIMA_model(data, diff2)
model = ARIMA(data, (0,2,4)).fit()

#model.summary2()        #生成一份模型报告
print(model.forecast(5))   #为未来5天进行预测， 返回预测结果， 标准误差， 和置信区间
# ari=model.fit()
# pre=ari.predict('2000-06-28','2005-06-28',dynamic=True,typ='levels')
# print(pre)
# a=pd.concat([data0,pre],axis=1,keys=['ori','pre'])
# a.plot()
# plt.title("预测")
# plt.show()