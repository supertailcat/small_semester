2020.6.29
9:00-12:00
主要内容：
	1. 工作任务分配
	2. git的学习：常用命令
		git add file.txt
		git commit -m "message"
		git pull origin master
		git push origin master
	3. 学习了git bash如何使用，在组长搭建好github远程仓库之后尝试commit
	4. 远程仓库github与本地git仓库建立连接失败
	5. github崩溃
	6. commit测试成功
14:00-18：00
主要内容：
	1. 学习git分支管理
	2. 分支创建成功，并且观看廖雪峰教程之后初步了解branch在团队项目中的优势与原理机制

2020.6.30
9:00-12:00
主要工作：
	1. windows配置python、java、spark
	2. linux配置python、java、spark
	3. 研究时间序列模型，尝试使用模型将清洗过的数据来创建图表：
		AR: 自回归模型——历史与当前的关系
		MA：平均移动模型——历史噪声与当前的关系
		ARMA：自回归平均移动模型——前二者的结合
		ARIMA：ARMA+差分法，对数据进行差分，使数据平稳
	4. 当前任务：学习pandas，将清洗过的数据画出图表
14:00-17:00
任务11-12：ARIMA建模
主要内容：
	1. 观看ARIMA时间序列模型教学视频
	2. 查看网上资料，参考代码
	3. 主要问题：
		1. pandas的画图不熟悉，ARIMA算法模型编写遇到阻碍
	4. 已解决问题：
		1. pandas的DataFrame中数据将日期转化为字符串
		2. pandas的DataFrame将日期作为index
		3. 以DataFrame为基础作出差分数据图
	5. 未解决问题：
		1. ARIMA模型参数的确定：p、q阶参数需要通过自相关系数ACF与偏自相关系数PACF确定
		2. 疑问：
			如何将数据分段才合理？
			训练集与测试集应如何划分？

2020.7.1
9:00-12:00
任务11-12：ARIMA建模
主要内容：
	1. 研究模型中函数predict与forecast的区别
	2. matplotlib库的使用
		1. 参数ax的特性——制表方式的不同：
			fig = plt.figure(figsize=(12, 8))
			ax1 = fig.add_subplot(211)  # 2行，1列，起始位置1
主要问题：
	1. ARIMA建模时是以每年同一天的气温为batch？还是单纯以日期顺序为batch？
	2. 模型性能如何评判？什么值能够判断模型预测效果的好坏？
14:00-16:00
任务11-12：ARIMA建模
主要内容：
	1. 原本的思路：
		1. 首先利用差分法处理数据并且确定其平稳性
		2. 然后利用数据画出ACF与PACF图像，用来确定p、q参数
		3. 利用参数代入ARIMA模型，然后拟合数据
		4. 最终利用拟合后的模型预测未来的气温数据
	2. 个人进展出现障碍：
		1. 输入数据不知道是每一年的同一天还是直接时间顺序的数据
		2. 预测的时候不知道怎么把预测的数据变成图
		3. 那几个参数改了改代码后程序崩溃
		4. ACF与PACF图中求出的p、q值较大，模型迭代时间十分长(>30min，不知道是代码有问题，亦或是是需要长时间迭代才能出结果)
	3. 分析原因：
		1. 网络参考源码过多，不同代码的风格不同，加上对pandas与matplotlib的不熟悉，使得编写自己的代码时出现问题
		2. 利用pandas来处理含时间的数据时使用工具不熟练，DataFrame与Series两个库不熟悉，不知道如何在导入的数据集中取得自己想要的数据
	4. 目前已有小组成员成功调试出代码，下一部打算将重点转移到已完成的代码中，研究并将其完善
	5. 代码目前存在完善的地方：
		1. 输入数据的获得：同3.2

2020.7.2
任务16-18：Flask的配置与应用
9:00-12:00
主要内容：
	1. 初步学习Flask：
		目前对于Flask处于完全不懂的状态，首先正在阅读资料，了解Flask实现了怎样的功能
		目前思路是通过了解输入与输出，从而推测其功能，先了解功能再学习原理
	2. 配置Flask环境：
		因为anaconda中已经含有flask的包，因此很容易就导入其中。但因为在服务器上运行，为了代码编写的方便，花了许多时间在配置服务器中的jupyter notebook远程连接，以便于后续写代码的方便
	3. 与组员沟通交流，初步了解json的运行机制以及输入输出，以便于了解flask的运行机制
14:00-18:00
主要内容：
	1. 观看视频，学习了Flask，成果如下：
		1.了解了Flask的基本作用以及原理
		2. 学会创建flask项目，并正常运行"hello world"
		3. 学习了路由请求方式：
			了解了HTTP常用的8种请求方式，并且了解了请求方式模拟软件"postman"
			@app.route('/', methods=['GET', 'POST']) # 添加新方法POST
		4. 路由参数处理：
			动态路由参数<>: @app.route('/<id>')
			限定类型：		@app.route('/<int=id>')
		5. 学习了Jinja2模版引擎的使用：
			学会使用render_template("index.html")函数
			学会变量代码块的使用：{{num}}
			控制代码块的使用: 
				{%for num in range(10)%} 
				{# TO DO #}
				{% endfor %}
	2. 与小组成员讨论了项目整体的架构，逐渐理解架构与技术框架的关系
	3. 问题：flask已经是个服务器，那么tomcat如何应用在flask上？
	4. 目标：
		1. 入门flask
		2. 并且能够使用flask读取json数据
		3. 并完成服务端与客户端的传输

2020/7/3
9:00-12:00
任务17-18：flask路由配置与微服务架构设计
主要内容：
	1. 明确flask目标：
		中转站，同与用户交互的django进行通信，
		接受到django发送的请求后将预测数据的json格式发送给jdango
	2. 任务：
		1. 编写与django的交互协议(get post)
		2. 将预测数据的json格式传输给django
		3. 将图片传输给django
	3. 完成任务：将json格式的预测数据读取，并成功传输给服务端
14:00-18:00
主要内容：
	1. 小组开展会议，明确了各自的目标：
		django使用http协议与客户端通信，管理用户登陆、账号密码等
		flask使用websocket与作为客户端的django通信，django对flask发送请求后，flask将数据传输给django端
	2. 学习了各种网络协议的区别：http与socket的不同，如果使用socket，那么早上的进展需要归零？
	3. 遇到困难：
		如何利用websocket从两端建立连接？
		如何将图片以什么样的形式传输给另一端？

2020/7/4
9:00-12:00
任务17-18、22：flask如何利用websocket与django进行交互
主要内容：
	1. 学习flask如何建立websocket：学习了gevent-websocket库，并且尝试使用chrome的客户端与服务端建立连接
	2. 遇到困难：在flask中尝试建立连接时，遇到request中的使用函数receive()时报错，客户端尝试用websocket与服务器连接时出错，尚未找到原因
14:00-18:00
主要内容：
	1. 小组开展会议，组长给组员演示如何在服务器中利用websocket与客户端网页建立连接并成功发送信息
	2. websocket相关代码研究，并且研究如何利用websocket传输json格式数据与图片格式数据
	3. 利用了websocket库进行连接，并且在阿里云服务器中搭建git项目，与在服务器中运行代码，通过服务器ip地址可以实现在客户端中的远程连接
	4. 疑问：websocket不需要依赖flask框架，那么flask框架的作用体现在何处？
	
2020/7/6
9:00-12:00
任务17-18、22-23：flask如何利用websocket与django进行交互
主要内容：
	1. 学习使用EChart绘制折线图：使用<script src="https://cdn.bootcss.com/echarts/4.2.1-rc1/echarts.min.js"></script>导入
		目前需要解决的问题：如何将json数据导入echart
		如何基本显示绘图
	2. 准备小组讨论：flask到底能用在哪个地方？django如何通过websocket调用？
14:00-18:00
主要内容：
	1. 新想法：flask搭建监控中转站，将中转信息发送至web，达到监控数据的目的
	2. 16:27 flask通过websocket与web初步连接——ready state：1
	3. 常用语句：
		1. 服务端：
			创建websocket：user_socket = request.environ.get('wsgi.websocket')  # type:WebSocket
			接收客户端消息：user_socket.receive()
			发送信息：user_socket.send()
		2. 客户端：
			1. 创建websocket：ws = new WebSocket("ws://127.0.0.1:9999/ws")
			2. 接受到服务端的消息之后的回调函数：
				ws.onmessage = function(data) {
					console.log(data.data)
				}
			3. 连接建立后的回调函数：ws.onopen = function(){}
			4. 关闭连接的回调函数：ws.onclose = function()

2020/7/7
任务17-18、22-23：flask如何利用websocket与django进行交互
1:09 实现基于flask的websocket连接
8:00-12:00
主要内容：
	1. 任务细化
		1. 主要实现：接受客户端城市请求->找到城市,输入城市数据->用arima进行预测->转成json->发回给客户端
		2. 用web实现控制台，监控客户端和服务端传输的数据：后台收发数据都显示在web上
14:00-18:00
	1. flask框架搭建，利用websocket连接，能够处理多客户端请求
	2. 功能实现：客户端分为admin与console两种，
		1. admin是主要交互对象，admin连接后发送数据给server，server接收后将所对应的数据传回给admin
		2. console监控admin与server之间交互的数据
	3. 目前需要做的工作：（按任务重要度排序）
		1. 与ARIMA模型整合，预测数据后能够读取相应的.json文件并将其传输给admin，本来想着实时端到端训练传输预测数据，但是由于模型训练时间过长，因此提前训练好生成.csv/.json后再进行下一部的传输操作(需要等王乐言同学处理好数据)
		2. 对server稳定性的改进：学习websocket，发现多客户端网络中，需要服务器有自己处理客户端中断等逻辑
		3. 控制台页面的美化
18:00-0:00
	1. 各省份预测数据出炉，尝试使用websocket调用相应省份数据，并传输成功
	2. 尝试与django进行数据交互，传输还是存在问题
	3. websocket客户端交互存在问题：
		1. 关闭console之后再打开就接收不到信息了

2020/7/8
8:00-12:00
主要内容：
	1. 找出flask服务端多用户交互的bug：解决一个console关闭造成其他console无法接受信息的bug
	2. 目前遇到问题：微服务器websocket与web连接不上，猜测web端代码存在问题，下午着重解决连接问题

		

			
		
			



